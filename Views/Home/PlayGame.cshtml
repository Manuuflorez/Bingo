@model Bingoo.Models.Room

<h2>Sala: @Model.Owner</h2>

<h3>Jugadores Activos: <span id="activePlayers">@Model.ActivePlayers</span></h3>

<div id="game-board">
    <h3>Velocidad del lanzamiento de balotas: @Model.Speed segundos</h3>
    <form asp-action="LeaveGame" method="post">
        <input type="hidden" name="id" value="@Model.Id" />
        <button type="submit" class="btn btn-danger">Salir de la Sala</button>
    </form>

    <!-- Tablero de Bingo -->
    <div id="bingo-board" class="board">
        <table id="bingo-table" class="bingo-table">
            <thead>
                <tr>
                    <th>B</th>
                    <th>I</th>
                    <th>N</th>
                    <th>G</th>
                    <th>O</th>
                </tr>
            </thead>
            <tbody id="bingo-body">
                <!-- Filas del tablero de Bingo -->
            </tbody>
        </table>
    </div>

    <div id="ball-drawer">
        <p id="current-ball">Balota actual: -</p>
    </div>

    <!-- Botón de Pausa/Reanudar y Sacar balotas dependiendo del tipo de lanzamiento -->
    @if (Model.MarkingType == "automatic")
    {
        <p>El juego se iniciará automáticamente con la velocidad seleccionada.</p>
        <button class="btn btn-success" id="start-game-btn">Iniciar Juego</button>
        <button class="btn btn-warning" id="pause-game-btn" style="display:none;">Pausar</button>
    }

    @if (Model.MarkingType == "manual")
    {
        <div>
            <p>Saca las balotas manualmente haciendo clic en el botón a continuación.</p>
            <button class="btn btn-primary" id="draw-ball-btn">Sacar una Balota</button>
        </div>
    }
</div>

<!-- Estilos personalizados para el tablero de Bingo -->
<style>
    .bingo-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    .bingo-table th,
    .bingo-table td {
        border: 2px solid #000;
        text-align: center;
        padding: 15px;
        font-size: 20px;
        width: 50px;
        height: 50px;
    }

    .bingo-table th {
        background-color: #f0f0f0;
        font-size: 22px;
    }

    .bingo-cell {
        background-color: #ffffff;
        color: #333;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .bingo-cell.marked {
        background-color: #4CAF50;
        color: #fff;
        font-weight: bold;
    }

    .bingo-cell:hover {
        background-color: #ddd;
    }

    .bingo-cell-free {
        background-color: #FFA500;
        color: #fff;
        font-weight: bold;
    }

    #current-ball {
        margin-top: 20px;
        font-size: 24px;
        font-weight: bold;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>

<script>
    let gameInterval;
    let isPaused = false;
    const autoMarking = '@Model.AutoMarking';  // Marcar automáticamente o no

    // Crear una conexión con SignalR al Hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/bingohub")
        .build();

    const roomId = "@Model.Id";
    const userName = "@(User.Identity?.Name ?? "Invitado")";

    // Conectar al hub cuando la página esté lista
    connection.start().then(function() {
        // Unirse a la sala
        connection.invoke("JoinRoom", roomId, userName);
    });

    // Manejar la actualización de la lista de jugadores activos cuando cambia
    connection.on("UpdateUserList", function(activePlayers) {
        document.getElementById('activePlayers').textContent = activePlayers.length;
    });

    // Salir de la sala cuando se cierre la página
    window.addEventListener("beforeunload", function () {
        connection.invoke("LeaveRoom", roomId, userName);
    });

    // Generar el tablero de Bingo con números aleatorios
    function generateBingoBoard() {
        const bingoBoard = document.getElementById('bingo-body');
        const savedBoard = localStorage.getItem(`BingoBoard_${roomId}`);
        const savedMarked = localStorage.getItem(`MarkedNumbers_${roomId}`);
        const board = savedBoard ? JSON.parse(savedBoard) : createNewBoard();
        const markedNumbers = savedMarked ? JSON.parse(savedMarked) : [];

        bingoBoard.innerHTML = '';

        board.forEach((col, colIndex) => {
            const row = document.createElement('tr');
            col.forEach((num, rowIndex) => {
                const cell = document.createElement('td');
                cell.classList.add('bingo-cell');

                if (colIndex === 2 && rowIndex === 2) {
                    cell.textContent = 'FREE';
                    cell.classList.add('bingo-cell-free');
                } else {
                    cell.textContent = num;
                }

                if (markedNumbers.includes(num)) {
                    cell.classList.add('marked');
                }

                row.appendChild(cell);
            });
            bingoBoard.appendChild(row);
        });

        if (autoMarking === 'no') {
            addManualMarkingListeners();
        }
    }

    function createNewBoard() {
        const columns = {
            B: generateUniqueNumbers(1, 15),
            I: generateUniqueNumbers(16, 30),
            N: generateUniqueNumbers(31, 45),
            G: generateUniqueNumbers(46, 60),
            O: generateUniqueNumbers(61, 75)
        };
        const board = [columns.B, columns.I, columns.N, columns.G, columns.O];
        localStorage.setItem(`BingoBoard_${roomId}`, JSON.stringify(board));
        return board;
    }

    function addManualMarkingListeners() {
        const cells = document.querySelectorAll('.bingo-cell');
        cells.forEach(cell => {
            cell.addEventListener('click', function () {
                const currentBall = parseInt(document.getElementById('current-ball').textContent.split(": ")[1]);
                if (parseInt(cell.textContent) === currentBall) {
                    cell.classList.add('marked');
                    saveMarkedNumber(parseInt(cell.textContent));
                }
            });
        });
    }

    function saveMarkedNumber(number) {
        const markedNumbers = JSON.parse(localStorage.getItem(`MarkedNumbers_${roomId}`)) || [];
        if (!markedNumbers.includes(number)) {
            markedNumbers.push(number);
            localStorage.setItem(`MarkedNumbers_${roomId}`, JSON.stringify(markedNumbers));
        }
    }

    function generateUniqueNumbers(min, max) {
        const numbers = [];
        while (numbers.length < 5) {
            const num = Math.floor(Math.random() * (max - min + 1)) + min;
            if (!numbers.includes(num)) {
                numbers.push(num);
            }
        }
        return numbers;
    }

    if ('@Model.MarkingType' === 'automatic') {
        document.getElementById('start-game-btn').addEventListener('click', function () {
            const generatorType = '@Model.GeneratorType';
            const speed = @Model.Speed * 1000;

            drawBall(generatorType);
            gameInterval = setInterval(function () {
                drawBall(generatorType);
            }, speed);

            document.getElementById('start-game-btn').style.display = 'none';
            document.getElementById('pause-game-btn').style.display = 'inline-block';
        });

        document.getElementById('pause-game-btn').addEventListener('click', function () {
            if (!isPaused) {
                clearInterval(gameInterval);
                isPaused = true;
                this.textContent = 'Reanudar';
            } else {
                const generatorType = '@Model.GeneratorType';
                const speed = @Model.Speed * 1000;
                gameInterval = setInterval(function () {
                    drawBall(generatorType);
                }, speed);
                isPaused = false;
                this.textContent = 'Pausar';
            }
        });
    }

    if ('@Model.MarkingType' === 'manual') {
        document.getElementById('draw-ball-btn').addEventListener('click', function () {
            const generatorType = '@Model.GeneratorType';
            drawBall(generatorType);
        });
    }

    function drawBall(generatorType) {
        const ball = generateRandomNumber(generatorType);
        document.getElementById('current-ball').textContent = "Balota actual: " + ball;
        if (autoMarking === 'yes') {
            markNumberOnBoard(ball);
        }
    }

    function generateRandomNumber(generatorType) {
        let number;
        switch (generatorType) {
            case '1':
                number = Math.floor(Math.random() * 75) + 1;
                break;
            case '2':
                number = (Math.floor(Math.random() * 75) + 1) * 2 % 75;
                break;
            case '3':
                number = Math.ceil(Math.random() * 75);
                break;
            default:
                number = Math.floor(Math.random() * 75) + 1;
                break;
        }
        return number;
    }

    function markNumberOnBoard(number) {
        const cells = document.querySelectorAll('.bingo-cell');
        cells.forEach(cell => {
            if (parseInt(cell.textContent) === number) {
                cell.classList.add('marked');
                saveMarkedNumber(number);
            }
        });
    }

    window.onload = generateBingoBoard;
</script>
