@model Bingoo.Models.Room

<h2>Dueño de la Sala: @Model.Owner</h2>

<h3>Jugadores Activos: <span id="activePlayers">@Model.ActivePlayers</span></h3>

<div id="game-board">
    <form asp-action="LeaveGame" method="post">
        <input type="hidden" name="id" value="@Model.Id" />
        <button type="submit" class="btn btn-danger">Salir de la Sala</button>
    </form>

    <!-- Tablero de Bingo -->
    <div id="bingo-board" class="board">
        <table id="bingo-table" class="bingo-table">
            <thead>
                <tr>
                    <th>B</th>
                    <th>I</th>
                    <th>N</th>
                    <th>G</th>
                    <th>O</th>
                </tr>
            </thead>
            <tbody id="bingo-body">
                <!-- Filas del tablero de Bingo -->
            </tbody>
        </table>
    </div>

    <div id="ball-drawer">
        <p id="current-ball">Balota actual: -</p>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

   @if (User?.Identity?.Name == Model.Owner && !Model.GameStarted)
{
        <form asp-action="StartGame" method="post">
            <input type="hidden" name="id" value="@Model.Id" />
            <button type="submit" class="btn btn-success">Iniciar Juego</button>
        </form>
    }

    <!-- Botón de Pausa/Reanudar y Sacar balotas dependiendo del tipo de lanzamiento -->
    @if (Model.MarkingType == "automatic")
    {
    <p>El juego se iniciará automáticamente con la velocidad seleccionada.</p>
    <button class="btn btn-success" id="start-game-btn"  @if (User?.Identity?.Name != Model.Owner || !Model.GameStarted)
    {<text>disabled</text>}>Sacar balotas</button>
    <button class="btn btn-warning" id="pause-game-btn" style="display:none;">Pausar</button>
    }

    @if (Model.MarkingType == "manual")
    {
    <div>
    <p>Saca las balotas manualmente haciendo clic en el botón a continuación.</p>
    <button class="btn btn-primary" id="draw-ball-btn" 
    @if (User?.Identity?.Name != Model.Owner || !Model.GameStarted)
    {<text>disabled</text>}>Sacar una Balota</button>
    </div>
    }
    <!-- Modal de Victoria -->
<div class="modal fade" id="victoryModal" tabindex="-1" aria-labelledby="victoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="victoryModalLabel">¡Felicidades!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="victoryMessage">Has ganado el juego.</p>
            </div>
            <div class="modal-footer">
                 <form asp-action="LeaveGame" method="post">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger">Cerrar</button>
                </form>
            </div>
        </div>
    </div>
</div>

</div>

<style>
    body {
        font-family: 'Comic Sans MS', cursive, sans-serif;
        background-color: #f0f4f7;
        color: #333;
    }

    .bingo-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        background-color: #ffffff;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .bingo-table th {
        background-color: #ffcc00;
        color: #fff;
        font-size: 22px;
        text-transform: uppercase;
        padding: 15px;
    }

    .bingo-table td {
        border: 3px solid #ddd;
        text-align: center;
        font-size: 24px;
        width: 70px;
        height: 70px;
        padding: 15px;
        color: #333;
        background-color: #f9f9f9;
        transition: background-color 0.3s ease;
    }

    .bingo-table td:hover {
        background-color: #f2d5a3;
        cursor: pointer;
    }

    .bingo-cell.marked {
        background-color: #ff4e50;
        color: #fff;
        font-weight: bold;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .bingo-cell-free {
        background-color: #2ecc71;
        color: #fff;
        font-weight: bold;
    }

    .bingo-board {
        border-radius: 15px;
        overflow: hidden;
    }

    #current-ball {
        background-color: #ff4e50;
        color: #fff;
        padding: 10px 15px;
        border-radius: 50px;
        font-size: 28px;
        font-weight: bold;
        display: inline-block;
        margin-top: 15px;
    }

    /* Colores para las cabeceras de cada columna */
    th:nth-child(1) { background-color: #f39c12; }
    th:nth-child(2) { background-color: #e74c3c; }
    th:nth-child(3) { background-color: #9b59b6; }
    th:nth-child(4) { background-color: #3498db; }
    th:nth-child(5) { background-color: #1abc9c; }

    .btn-primary {
        background-color: #ffcc00;
        border: none;
        font-size: 18px;
        padding: 10px 20px;
        color: #fff;
        border-radius: 30px;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #ff9933;
    }

    .btn-danger {
        background-color: #e74c3c;
        border: none;
        font-size: 18px;
        padding: 10px 20px;
        color: #fff;
        border-radius: 30px;
        transition: background-color 0.3s ease;
    }

    .btn-danger:hover {
        background-color: #c0392b;
    }

    .btn-success {
        background-color: #2ecc71;
        border: none;
        font-size: 18px;
        padding: 10px 20px;
        color: #fff;
        border-radius: 30px;
        transition: background-color 0.3s ease;
    }

    .btn-success:hover {
        background-color: #27ae60;
    }

    /* Modal de Victoria */
    .modal-content {
        background-color: #ecf0f1;
        border-radius: 15px;
    }

    .modal-header {
        background-color: #3498db;
        color: #fff;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .modal-footer {
        border-top: none;
        display: flex;
        justify-content: center;
    }

    #draw-ball-btn {
        box-shadow: 0 0 20px rgba(255, 0, 0, 0.5);
        animation: glowing 1.5s infinite;
        background-color: #ffcc00;
    }

     #current-ball {
        margin-top: 20px;
        font-size: 24px;
        font-weight: bold;
    }

    @@keyframes glowing {
        0% { box-shadow: 0 0 5px rgba(255, 0, 0, 0.5); }
        50% { box-shadow: 0 0 20px rgba(255, 0, 0, 1); }
        100% { box-shadow: 0 0 5px rgba(255, 0, 0, 0.5); }
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>

<script>
    let gameInterval;
    let isPaused = false;
    const autoMarking = '@Model.AutoMarking';
    const gameRules = '@Model.GameRules';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/bingohub")
        .build();

    const roomId = "@Model.Id";
    const userName = '@(User?.Identity?.Name ?? "Invitado")';

    connection.start().then(function () {
        connection.invoke("JoinRoom", roomId, userName);
    });

    connection.on("UpdateUserList", function (activePlayers) {
        if (activePlayers && activePlayers.length !== undefined) {
            document.getElementById('activePlayers').textContent = activePlayers.length;
        }
    });

    connection.on("ReceiveBall", function (ballNumber) {
        document.getElementById('current-ball').textContent = "Balota actual: " + ballNumber;
        markNumberOnBoard(ballNumber);
        checkWinCondition();
    });

     connection.on("GameWon", function (winnerName) {
        // Mostrar a todos los jugadores quién ganó
        showVictoryModal(`${winnerName} ha ganado el juego!`);

        // Redirigir a todos los jugadores al inicio después de cerrar el modal
        const victoryModal = new bootstrap.Modal(document.getElementById('victoryModal'));
        victoryModal.show();

        victoryModal._element.addEventListener('hidden.bs.modal', function () {
            window.location.href = '/'; // Redirigir al inicio
        });
    });

    window.addEventListener("beforeunload", function () {
        if (roomId && userName) {
            connection.invoke("LeaveRoom", roomId, userName);
        }
    });

    function generateBingoBoard() {
        const bingoBoard = document.getElementById('bingo-body');
        const savedBoard = localStorage.getItem(`BingoBoard_${roomId}`);
        const savedMarked = localStorage.getItem(`MarkedNumbers_${roomId}`);
        const board = savedBoard ? JSON.parse(savedBoard) : createNewBoard();
        const markedNumbers = savedMarked ? JSON.parse(savedMarked) : [];

        bingoBoard.innerHTML = '';

        board.forEach((col, colIndex) => {
            const row = document.createElement('tr');
            col.forEach((num, rowIndex) => {
                const cell = document.createElement('td');
                cell.classList.add('bingo-cell');

                if (colIndex === 2 && rowIndex === 2) {
                    cell.textContent = 'FREE';
                    cell.classList.add('bingo-cell-free');
                } else {
                    cell.textContent = num;
                }

                if (markedNumbers.includes(num)) {
                    cell.classList.add('marked');
                }

                row.appendChild(cell);
            });
            bingoBoard.appendChild(row);
        });

        if (autoMarking === 'no') {
            addManualMarkingListeners();
        }
    }

    function createNewBoard() {
        const columns = {
            B: generateUniqueNumbers(1, 15),
            I: generateUniqueNumbers(16, 30),
            N: generateUniqueNumbers(31, 45),
            G: generateUniqueNumbers(46, 60),
            O: generateUniqueNumbers(61, 75)
        };
        const board = [columns.B, columns.I, columns.N, columns.G, columns.O];
        localStorage.setItem(`BingoBoard_${roomId}`, JSON.stringify(board));
        return board;
    }

    function addManualMarkingListeners() {
        const cells = document.querySelectorAll('.bingo-cell');
        cells.forEach(cell => {
            cell.addEventListener('click', function () {
                const currentBall = parseInt(document.getElementById('current-ball').textContent.split(": ")[1]);
                if (parseInt(cell.textContent) === currentBall) {
                    cell.classList.add('marked');
                    saveMarkedNumber(parseInt(cell.textContent));
                    checkWinCondition();
                }
            });
        });
    }

    function saveMarkedNumber(number) {
        const markedNumbers = JSON.parse(localStorage.getItem(`MarkedNumbers_${roomId}`)) || [];
        if (!markedNumbers.includes(number)) {
            markedNumbers.push(number);
            localStorage.setItem(`MarkedNumbers_${roomId}`, JSON.stringify(markedNumbers));
        }
    }

    function generateUniqueNumbers(min, max) {
        const numbers = [];
        while (numbers.length < 5) {
            const num = Math.floor(Math.random() * (max - min + 1)) + min;
            if (!numbers.includes(num)) {
                numbers.push(num);
            }
        }
        return numbers;
    }

    if ('@Model.MarkingType' === 'automatic') {
        document.getElementById('start-game-btn').addEventListener('click', function () {
            const generatorType = '@Model.GeneratorType';
            const speed = @Model.Speed * 1000;

            drawBall(generatorType);
            gameInterval = setInterval(function () {
                drawBall(generatorType);
            }, speed);

            document.getElementById('start-game-btn').style.display = 'none';
            document.getElementById('pause-game-btn').style.display = 'inline-block';
        });

        document.getElementById('pause-game-btn').addEventListener('click', function () {
            if (!isPaused) {
                clearInterval(gameInterval);
                isPaused = true;
                this.textContent = 'Reanudar';
            } else {
                const generatorType = '@Model.GeneratorType';
                const speed = @Model.Speed * 1000;
                gameInterval = setInterval(function () {
                    drawBall(generatorType);
                }, speed);
                isPaused = false;
                this.textContent = 'Pausar';
            }
        });
    }

    if ('@Model.MarkingType' === 'manual') {
        document.getElementById('draw-ball-btn').addEventListener('click', function () {
            const generatorType = '@Model.GeneratorType';
            drawBall(generatorType);
        });
    }

    function speakNumber(number) {
        // Verificar si el navegador soporta la síntesis de voz
        if ('speechSynthesis' in window) {
            const msg = new SpeechSynthesisUtterance();
            msg.text = `Número ${number}`;
            msg.lang = 'es-ES'; // Idioma: español
            msg.pitch = 1; // Tonalidad
            msg.rate = 1; // Velocidad
            msg.volume = 1; // Volumen
            window.speechSynthesis.speak(msg); // Ejecutar el texto hablado
        } else {
            console.log("La síntesis de voz no es compatible con este navegador.");
        }
    }

    function drawBall(generatorType) {
        const ball = generateRandomNumber(generatorType);
        connection.invoke("BroadcastBall", roomId, ball);
        speakNumber(ball);
    }

    function generateRandomNumber(generatorType) {
        let number;
        switch (generatorType) {
            // Método 1: Cuadrados medios
            case '1':
                number = middleSquareMethod();
                break;
            // Método 2: Congruencia lineal
            case '2':
                number = linearCongruentialGenerator();
                break;
            // Método 3: Fibonacci modificado
            case '3':
                number = modifiedFibonacci();
                break;
            default:
                number = middleSquareMethod(); // Por defecto, usar método de cuadrados medios
                break;
        }
        return number;
    }

    // Método de los Cuadrados Medios
    function middleSquareMethod() {
        let seed = new Date().getTime().toString();

        // Convertir la semilla en un número entero
        let seedNumber = parseInt(seed.slice(-4)); // Solo los últimos 4 dígitos de la semilla para evitar un número demasiado grande

        // Cuadrar la semilla
        let square = seedNumber * seedNumber;

        // Convertir el cuadrado en cadena y obtener la parte media
        let squareStr = square.toString();
        let middleDigits = squareStr.substring(Math.floor(squareStr.length / 2) - 2, Math.floor(squareStr.length / 2) + 2);

        // Convertir los dígitos medios en número
        let nextSeed = parseInt(middleDigits);

        // Asegurarse de que el número esté en el rango de 1 a 75
        let randomNumber = (nextSeed % 75) + 1;

        return randomNumber;
    }

    // Generador Congruencia Lineal mejorado
    function linearCongruentialGenerator() {
        let seed = parseInt(new Date().getTime().toString().slice(-4));

        const a = 1664525; // Constante multiplicadora
        const c = 1013904223; // Incremento
        const m = 4294967296; // Este es 2^32 calculado manualmente

        // Generar el siguiente número usando el método de congruencia lineal
        let next = (a * seed + c) % m;

        // Limitar el número generado al rango de 1 a 75
        let randomNumber = (next % 75) + 1;

        return randomNumber;
    }

    // Generador de Fibonacci modificado
    function modifiedFibonacci() {
        let seed = parseInt(new Date().getTime().toString().slice(-4));

        // Inicializar los primeros dos números de la secuencia de Fibonacci
        let previous = seed; // Primer número de la secuencia
        let current = (seed * 2) % 75 + 1; // Segundo número de la secuencia, limitado a 1-75

        // Generar el siguiente número de Fibonacci modificado, limitado al rango de 1 a 75
        let next = (previous + current) % 75 + 1;

        return next;
    }

    function markNumberOnBoard(number) {
        const cells = document.querySelectorAll('.bingo-cell');
        cells.forEach(cell => {
            if (parseInt(cell.textContent) === number) {
                cell.classList.add('marked');
                saveMarkedNumber(number);
            }
        });
    }

    function checkWinCondition() {
        const cells = document.querySelectorAll('.bingo-cell');
        const markedCells = Array.from(cells).filter(cell => cell.classList.contains('marked'));

        let winMessage = '';
        let hasWon = false;

        switch (gameRules) {
            case 'linea':
                if (checkLineWin()) {
                    winMessage = '¡Felicidades, ganaste al completar una línea!';
                    hasWon = true;
                }
                break;
            case 'carton':
                if (markedCells.length === 24) {
                    winMessage = '¡Felicidades, ganaste al llenar el cartón completo!';
                    hasWon = true;
                }
                break;
            case 'cuatroEsquinas':
                if (checkCornersWin()) {
                    winMessage = '¡Felicidades, ganaste con las cuatro esquinas!';
                    hasWon = true;
                }
                break;
        }

        if (hasWon) {
            connection.invoke("AnnounceWinner", roomId, userName);
        }
    }

    function showVictoryModal(message) {
        const victoryMessage = document.getElementById('victoryMessage');
        victoryMessage.textContent = message;
        const victoryModal = new bootstrap.Modal(document.getElementById('victoryModal'));
        victoryModal.show();
    }

    function checkLineWin() {
        const rows = document.querySelectorAll('#bingo-table tbody tr');
        return Array.from(rows).some(row => Array.from(row.children).every(cell => cell.classList.contains('marked') || cell.classList.contains('bingo-cell-free')));
    }

    function checkCornersWin() {
        const corners = [
            document.querySelector('#bingo-table tbody tr:first-child td:first-child'),
            document.querySelector('#bingo-table tbody tr:first-child td:last-child'),
            document.querySelector('#bingo-table tbody tr:last-child td:first-child'),
            document.querySelector('#bingo-table tbody tr:last-child td:last-child')
        ];
        return corners.every(cell => cell.classList.contains('marked'));
    }

    window.onload = generateBingoBoard;
</script>
